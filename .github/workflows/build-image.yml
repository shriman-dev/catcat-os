name: build images
on:
  workflow_call:
  schedule:
    - cron: '05 10 * * *'  # 10:05am UTC everyday
#  pull_request:
#    branches:
#      - main
#  push:
#    branches:
#      - main
#    paths-ignore:
#      - '**/README.md'
#      - '**/build-iso.yml'
#      - '**/create-release.yml'
  workflow_dispatch:

env:
  IMAGE_DESC: "Meow"
  PULL_IMAGE_REGISTRY: ghcr.io/ublue-os
  PUSH_IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"  # do not edit
  BASE_IMAGE_NAME: "bazzite-gnome"

concurrency:
  group: build-image-${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build_push:
    name: Build Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        IMAGE_NAME: ["catcat-os", "catcat-os-nv"]

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

#      - name: Maximize build space
#        uses: ublue-os/remove-unwanted-software@v9

      - name: Pre Build Configuration
        id: pre-build-config
        shell: bash
        run: |
          set -eou pipefail
          pwd
          ls -A1
          lsblk --all -o +FSUSED,FSSIZE,LABEL,FSTYPE
          source ${{ github.workspace }}/files/VAR.sh
          echo "MAJOR_VERSION=${MAJOR_VERSION}" >> $GITHUB_ENV
          echo "DEFAULT_TAG=${DEFAULT_TAG}" >> $GITHUB_ENV
          echo "DATESTAMP=${DATESTAMP}" >> $GITHUB_ENV
          echo "TIMESTAMP=${TIMESTAMP}" >> $GITHUB_ENV
          echo "AH_DATE=${AH_DATE}" >> $GITHUB_ENV
          echo "COMMIT_SHA=${GITHUB_SHA}" >> $GITHUB_ENV
          if [[ ${{ matrix.IMAGE_NAME }} =~ '-nv' ]]; then
            echo "NVIDIA_FLAVOR=-nvidia-open" >> $GITHUB_ENV
          fi

      # Build metadata
      - name: Image Metadata
        uses: docker/metadata-action@v5
        id: metadata
        with:
          tags: |
            type=raw,value=${{ env.DEFAULT_TAG }}
            type=raw,value=${{ env.MAJOR_VERSION }}
            type=raw,value=${{ env.MAJOR_VERSION }}.${{ env.DATESTAMP }}
            type=raw,value=${{ env.MAJOR_VERSION }}.${{ env.DATESTAMP }}.${{ env.TIMESTAMP }}
            type=raw,value={{sha}}
            type=sha,enable=${{ github.event_name == 'pull_request' }}
            type=ref,event=pr
          labels: |
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/main/README.md
            org.opencontainers.image.created=${{ env.AH_DATE }}
            org.opencontainers.image.description=${{ env.IMAGE_DESC }}
            org.opencontainers.image.title=${{ matrix.IMAGE_NAME }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ env.MAJOR_VERSION }}.${{ env.DATESTAMP }}
            containers.bootc=1
          sep-tags: " "
          sep-annotations: " "

      # Build image using Buildah action
      - name: Build Image
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            ./Containerfile
          image: ${{ matrix.IMAGE_NAME }}
          tags: |
            ${{ steps.metadata.outputs.tags }}
          build-args: |
            IMAGE_NAME=${{ matrix.IMAGE_NAME }}
            MAJOR_VERSION=${{ env.MAJOR_VERSION }}
            COMMIT_SHA=${{ env.COMMIT_SHA }}
            PULL_IMAGE_REGISTRY=${{ env.PULL_IMAGE_REGISTRY }}
            BASE_IMAGE_NAME=${{ env.BASE_IMAGE_NAME }}
            NVIDIA_FLAVOR=${{ env.NVIDIA_FLAVOR }}
          labels: ${{ steps.meta.outputs.labels }}
          oci: false

#      - name: Remove auxiliary images
#        run: |
#          sudo podman image rm ${{ env.PULL_IMAGE_REGISTRY }}/${{ env.BASE_IMAGE_NAME }}${{ env.NVIDIA_FLAVOR }}:${{ env.MAJOR_VERSION }}

      # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      # https://github.com/macbre/push-to-ghcr/issues/12
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.PUSH_IMAGE_REGISTRY }}

      # Rechunk is a script that we use on Universal Blue to make sure there isnt a single huge layer when your image gets published.
      # This does not make your image faster to download, just provides better resumability and fixes a few errors.
      # Documentation for Rechunk is provided on their github repository at https://github.com/hhd-dev/rechunk
      # You can enable it by uncommenting the following lines

#      - name: Run Rechunker
#        id: rechunk
#        uses: hhd-dev/rechunk@v1.1.2
#        with:
#          rechunk: 'ghcr.io/hhd-dev/rechunk:latest'
#          ref: 'raw-img'
#          prev-ref: "${{ steps.registry_case.outputs.lowercase }}/${{ matrix.IMAGE_NAME }}:${{ env.DEFAULT_TAG }}"
#          version: ${{ env.MAJOR_VERSION }}.${{ env.DATESTAMP }}.${{ env.TIMESTAMP }}
#          labels: ${{ steps.metadata.outputs.labels }}
#          max-layers: 50
#          skip_compression: true

       # These `if` statements are so that pull requests for your custom images do not make it publish any packages under your name without you knowing
       # They also check if the runner is on the default branch so that things like the merge queue (if you enable it), are going to work

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push To GHCR
        uses: redhat-actions/push-to-registry@v2
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        id: push
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          registry: ${{ steps.registry_case.outputs.lowercase }}
          image: ${{ matrix.IMAGE_NAME }}
          tags: ${{ steps.metadata.outputs.tags }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
#          extra-args: |
#            --compression-format=zstd
#            --compression-level=20


      # This section is optional and only needs to be enabled if you plan on distributing
      # your project for others to consume. You will need to create a public and private key
      # using Cosign and save the private key as a repository secret in Github for this workflow
      # to consume. For more details, review the image signing section of the README.
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.9.0
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)

      - name: Sign container image
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        run: |
          echo "Digest is $DIGEST"
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${IMAGE_FULL}@${DIGEST}
        env:
          IMAGE_FULL: ${{ steps.registry_case.outputs.lowercase }}/${{ matrix.IMAGE_NAME }}
          DIGEST: ${{ steps.push.outputs.digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
