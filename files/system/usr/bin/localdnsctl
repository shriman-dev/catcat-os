#!/usr/bin/bash

# Default values
CONFIG_DIR="/etc/catcat-os/localdns.d"
TMPDIR="/tmp/dns-blocklist"
REPO_URL="https://raw.githubusercontent.com/shriman-dev/dns-blocklist/refs/heads/main"
DNSCRYPTDIR='/etc/dnscrypt-proxy'
DNSMASQDIR='/etc/dnsmasq.d'
DNSCRYPTLOGDIR='/var/log/dnscrypt-proxy'
DNSMASQLOGDIR='/var/log'
QUIET=false
VERBOSE=

# Error logging with optional verbose output
log() {
    local level="$1"
    shift
    local msg="$*"

    # Colors for output
    local red='\033[0;31m' green='\033[0;32m' yellow='\033[1;33m'
    local noc='\033[0m' # No Color

    case "$level" in
        "INFO")  [[ $QUIET == false ]] && echo -e "${green}[INFO]${noc} $msg" ;;
        "WARN")  echo -e "${yellow}[WARNING]${noc} $msg" >&2 ;;
        "ERROR") echo -e "${red}[ERROR]${noc} $msg" >&2 ;;
    esac
}

# Error handling with optional function call
die() {
    log "ERROR" "$1"
    [[ -n "$2" ]] && $2
    exit 1
}

need_root() {
    [[ $(id -u) -eq 0 ]] || die "This operation requires root privileges"
}

update_blocklist() {
    need_root
    mkdir -p "$CONFIG_DIR" "$TMPDIR" || die "Failed to create directories"

    local mini=$([[ -f "$CONFIG_DIR/large-dns-blocklist" ]] || echo "-mini")
    local target_type=$([[ -f "$CONFIG_DIR/only-dnscrypt-blocklist" ]] && echo "dnscrypt" || echo "dnsmasq")

    log "INFO" "Updating DNS blocklist (Backend: ${target_type}, Blocklist Size: $([[ ${mini} =~ 'mini' ]] && echo ${mini:1} || echo 'large'))"
    local src_file dst_file subdir
    if [[ $target_type == "dnscrypt" ]]; then
        src_file="domains-filtered-subdomains${mini}"
        dst_file="${DNSCRYPTDIR}/domains-blocklist.txt"
        subdir="domains.d"
    else
        src_file="blocklist${mini}.conf"
        dst_file="${DNSMASQDIR}/domains-blocklist.conf"
        subdir="dnsmasq.d"
    fi

    log "INFO" "Downloading blocklist..."
    curl -sLo "$TMPDIR/$src_file.tar.zst" "$REPO_URL/$subdir/$src_file.tar.zst" ||
        die "Failed to download blocklist"

    log "INFO" "Extracting blocklist..."
    tar --use-compress-program "zstd -d" -xf "$TMPDIR/$src_file.tar.zst" -C "$TMPDIR/" ||
        die "Failed to extract blocklist"
    rm ${VERBOSE:+-v} -f "${DNSMASQDIR}/domains-blocklist.conf" "${DNSCRYPTDIR}/domains-blocklist.txt"
    cp ${VERBOSE:+-v} -f "$TMPDIR/$src_file" "$dst_file"
    rm -rf "$TMPDIR"
    log "INFO" "Blocklist update completed successfully"
}

toggle_localdns() {
    need_root
    [[ ! -f "$CONFIG_DIR/localdns-resolv.conf" ]] && die "localdns-resolv.conf missing"

    case "$1" in
        enable)
            log "INFO" "Enabling local DNS..."
            ln ${VERBOSE:+-v} -sf $CONFIG_DIR/localdns-resolv.conf /etc/resolv.conf &&
            systemctl enable --force --now dnscrypt-proxy.service dnsmasq.service ||
                die "Failed to enable DNS services"
            ;;
        disable)
            log "INFO" "Disabling local DNS..."
            local nm_resolvconf='/run/NetworkManager/resolv.conf'
            [[ ! -f "$nm_resolvconf" ]] && die "NetworkManager resolv.conf missing at $nm_resolvconf"
            cp ${VERBOSE:+-v} -f $nm_resolvconf /etc/resolv.conf &&
            systemctl disable --force --now dnscrypt-proxy.service dnsmasq.service &&
            systemctl restart NetworkManager.service ||
                die "Failed to disable DNS services"
            ;;
        restart)
            log "INFO" "Restarting DNS services..."
            systemctl restart dnscrypt-proxy.service dnsmasq.service ||
                die "Failed to restart DNS services"
            ;;
        *) 
            die "Invalid service action. Use 'enable', 'disable', or 'restart'"
            ;;
    esac
    systemctl daemon-reload
    log "INFO" "Operation completed successfully"
}

switch_blocklist() {
    need_root
    case "${1,,}" in
        dnsmasq)
            rm ${VERBOSE:+-v} -f "$CONFIG_DIR/only-dnscrypt-blocklist"
            log "INFO" "Switched to DNSMasq backend"
            log "INFO" "Update DNS blocklist to apply changes and restart localdns to make changes take effect"
            ;;
        dnscrypt)
            touch "$CONFIG_DIR/only-dnscrypt-blocklist"
            log "INFO" "Switched to DNSCrypt backend"
            log "INFO" "Update DNS blocklist to apply changes and restart localdns to make changes take effect"
            ;;
        *) 
            die "Invalid backend. Use 'dnsmasq' or 'dnscrypt'"
            ;;
    esac
}

set_size() {
    need_root
    case "${1,,}" in
        mini)
            rm ${VERBOSE:+-v} -f "$CONFIG_DIR/large-dns-blocklist"
            log "INFO" "Set blocklist size to mini"
            log "INFO" "Update DNS blocklist to apply changes and restart localdns to make changes take effect"
            ;;
        large)
            touch "$CONFIG_DIR/large-dns-blocklist"
            log "INFO" "Set blocklist size to large"
            log "INFO" "Update DNS blocklist to apply changes and restart localdns to make changes take effect"
            ;;
        *) 
            die "Invalid size. Use 'mini' or 'large'"
            ;;
    esac
}

# Log functions
clean_old_logs() {
    local retention="3 months"
    [[ $1 ]] && echo "$1" > $CONFIG_DIR/keep-log-time
    [[ -f $CONFIG_DIR/keep-log-time ]] && retention="$(cat $CONFIG_DIR/keep-log-time)"

    log "INFO" "Cleaning logs older than $retention"

    local dnscrypt_date_format="$(date -d "-$retention" +"%Y-%m-%d")"
    local dnsmasq_date_format="$(date -d "-$retention" +"%b %d")"

    [[ $VERBOSE == true ]] && log "INFO" "dnscrypt_date_format: $dnscrypt_date_format, dnsmasq_date_format: $dnsmasq_date_format"

    # Clean logs
    for log_file in "$DNSMASQLOGDIR/dnsmasq.log" "$DNSCRYPTLOGDIR"/*.log; do
        [[ $log_file == *"$DNSCRYPTLOGDIR"* ]] && date_format="$dnscrypt_date_format" || date_format="$dnsmasq_date_format"
        line=$(rg -n "${date_format}" "$log_file" | cut -d: -f1 | tail -n1)

        [[ $VERBOSE == true ]] && echo '' && log "INFO" "Clean logs before '${date_format}' from line ${line:-0} in log file: ${log_file}"

        if [[ ! -z $line ]]; then
            sed -i "1,${line} d" "$log_file" || die "Log cleanup failed for ${log_file}"
        else
            [[ $VERBOSE == true ]] && log "INFO" "No logs before '${date_format}' in log file: ${log_file}"
        fi
    done

    log "INFO" "Log cleanup completed"
}

RG_BASE="--line-buffered --passthru --color=always"
RG_BLUE="$RG_BASE --colors match:fg:blue"
RG_YELLOW="$RG_BASE --colors match:fg:yellow"
RG_RED="$RG_BASE --colors match:fg:red"
RG_RED_BG_BLACK="$RG_RED --colors match:bg:black"
LAST_LINES=5999

dnsmasq_logs() {
  need_root
  local path="$DNSMASQLOGDIR"
  local cmd="tail -n ${LAST_LINES} -f"
  local common_caputer_pattern='DNS-rebind| ::$|0\.0\.0\.0|NXDOMAIN|HINFO|REFUSED|SERVFAIL'
  local nxdata_pattern=': .*NXDOMAIN|NODATA.*|reply.*truncated'
  local reject_pattern=': .*DNS-rebind.*|: .* ::$|: .*0\.0\.0\.0|config.*NXDOMAIN|: .*HINFO.*'
  local error_patterns=': .*REFUSED.*|: .*SERVFAIL.*'

  case $1 in
        detailed)
            $cmd $path/dnsmasq.log |
            rg $RG_YELLOW "$nxdata_pattern" |
            rg $RG_RED "$reject_pattern" |
            rg $RG_RED_BG_BLACK "$error_patterns"
            ;;
        queries)
            $cmd $path/dnsmasq.log |
            rg --color=never -i "query|NODATA|$common_caputer_pattern" |
            rg $RG_YELLOW "$nxdata_pattern" |
            rg $RG_RED "$reject_pattern" |
            rg $RG_RED_BG_BLACK "$error_patterns"
            ;;
        blocked)
            $cmd $path/dnsmasq.log |
            rg --color=never -i "$common_caputer_pattern" |
            rg $RG_YELLOW "$nxdata_pattern" |
            rg $RG_RED "$reject_pattern" |
            rg $RG_RED_BG_BLACK "$error_patterns"
            ;;
        *) die "Invalid log type: $1" ;;
  esac | bat --paging=never -nl log
}

dnscrypt_logs() {
  local path="$DNSCRYPTLOGDIR"
  local cmd="tail -n ${LAST_LINES} -f"

  [[ $1 =~ 'launch' ]] && log_format="log"
  case $1 in
        queries)
            $cmd $path/query.log |
            rg $RG_YELLOW 'NXDOMAIN|NODATA|SYNTH' |
            rg $RG_RED '\t.*REJECT.*|NOT_READY|NETWORK_ERROR|SERVER_TIMEOUT|' |
            rg $RG_RED_BG_BLACK '\t.*REFUSED.*|\t.*SERVFAIL.*|\t.*RESPONSE_ERROR.*'
            ;;
        blocked)
            $cmd $path/blocked-domains.log |
            rg $RG_YELLOW '\(alias.*' |
            rg $RG_BLUE '\*\.'
            ;;
        allowed)
            $cmd $path/allowed-domains.log |
            rg $RG_YELLOW '\(alias.*' |
            rg $RG_BLUE '\*\.'
            ;;
        blocked-ips)
            $cmd $path/blocked-ips.log
            ;;
        allowed-ips)
            $cmd $path/allowed-ips.log
            ;;
        nxdomains)
            $cmd $path/nx.log
            ;;
        launch)
            $cmd $path/dnscrypt-proxy.log
            ;;
        *) die "Invalid log type: $1" ;;
  esac | bat --paging=never -nl "${log_format:-csv}"
}

# Execute the appropriate function based on log type
log_types() {
    bat /etc/dnscrypt-proxy/allowed-ips.txt >/dev/null 2>&1 || bat cache --build >/dev/null 2>&1
    case $LOG_TYPE in
        "dnsmasq-"*) dnsmasq_logs ${LOG_TYPE#dnsmasq-} ;;
        "dnscrypt-"*) dnscrypt_logs ${LOG_TYPE#dnscrypt-} ;;
        *) die "Invalid log type specified: $LOG_TYPE" show_help ;;
    esac
}


show_help() {
    echo "Usage: $(basename "$0") [OPTIONS]"
    echo "Configure and manage DNS to block Ad/Malware using blocklist or monitor DNS logs with localdns"
    echo
    echo "Options:"
    echo "  -h, --help                                Show this help message"
    echo "  -v, --verbose                             Enable verbose output"
    echo "  -q, --quiet                               Suppress non-error output"
    echo "  -u, --update-blocklist                    Update DNS blocklist"
    echo "  --enable                                  Enable localdns"
    echo "  --disable                                 Disable localdns"
    echo "  --restart                                 Restart DNSMasq and DNSCrypt"
    echo "  --switch-blocklist-backend BACKEND        Change blocklist backend 'dnsmasq|dnscrypt' (default: dnsmasq)"
    echo "  --set-blocklist-size SIZE                 Set blocklist size 'mini|large' (default: mini)"
    echo
    echo "Log Options:"
    echo "  --flush-logs TIME                         Remove logs older than TIME"
    echo "                                            TIME format: N 'day(s)|week(s)|month(s)|year(s)' (default: 3 months)"
    echo "  -n, --lines NUMBER                        Show last N lines of log (default: 5999)"
    echo "  -l, --log TYPE                            Specify log type to display"
    echo
    echo "Log types:"
    echo "  dnsmasq-detailed         Show detailed DNSMasq logs"
    echo "  dnsmasq-queries          Show DNSMasq queries"
    echo "  dnsmasq-blocked          Show blocked DNSMasq queries"
    echo "  dnscrypt-queries         Show DNSCrypt queries"
    echo "  dnscrypt-blocked         Show blocked DNSCrypt queries"
    echo "  dnscrypt-allowed         Show allowed DNSCrypt queries"
    echo "  dnscrypt-blocked-ips     Show blocked IPs in DNSCrypt"
    echo "  dnscrypt-allowed-ips     Show allowed IPs in DNSCrypt"
    echo "  dnscrypt-nxdomains       Show DNSCrypt NXDOMAIN responses"
    echo "  dnscrypt-launch          Show DNSCrypt launch logs"
}

# Main argument parsing
[[ $# -eq 0 ]] && die "No options provided" show_help

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -q|--quiet)
            QUIET=true
            shift
            ;;
        -u|--update)
            update_blocklist
            exit 0
            ;;
        --enable|--disable|--restart)
            toggle_localdns "${1:2}"
            exit 0
            ;;
        --switch-blocklist-backend)
            shift
            [[ $1 ]] && switch_blocklist "$1" || die "Backend type required (dnsmasq|dnscrypt)"
            shift
            ;;
        --set-blocklist-size)
            shift
            [[ $1 ]] && set_size "$1" || die "Size required (mini|large)"
            shift
            ;;
        --flush-logs)
            shift
            [[ $# -eq 0 ]] && { log "INFO" "Using default retention period"; clean_old_logs; } || \
            if [[ $# -ge 2 ]]; then
                clean_old_logs "$1 $2"; shift 2
            else
                clean_old_logs "$1"; shift
            fi
            ;;
        -n|--lines)
            shift
            [[ $1 ]] && LAST_LINES=${1} || die "Number of lines required"
            shift
            ;;
        -l|--log)
            shift
            LOG_TYPE="$1"
            [[ $LOG_TYPE ]] && log_types ||
                die "Log type required" show_help
            shift
            ;;
        *)
            die "Unknown option: $1" show_help
            ;;
    esac
done
