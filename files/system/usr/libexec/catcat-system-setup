#!/usr/bin/bash

# GLOBAL
KARGS=$(rpm-ostree kargs)
NEEDED_KARGS=()
U1000="$(id -un 1000)"

# KERNEL ARGUMENTS
echo "Current kargs: $KARGS"

replaceXAdd() {
grep -qi ''${1}'' ${3} && sed -i -e "s|.*${1}.*|${2}|" ${3} || sh -c "echo '${2}' >> ${3}"
}

# setup user home configs
REAL_USERS=$(grep '/home' /etc/passwd | cut -d: -f1)
for SOME_USER in ${REAL_USERS[@]}; do
  if [[ ! "$SOME_USER" == "root" ]]; then
    sudo -u "$SOME_USER" bash -c "/usr/libexec/catcat-user-setup" &
  fi
done


if [[ ! -f /etc/catcat-os/first-boot ]]; then
  /usr/bin/dconf update
#  cp -dvf /etc/dconf/db/distro /etc/skel/.config/dconf/user
#  cp -dvf /etc/dconf/db/distro /var/home/*/.config/dconf/user

  # set DNS blocklist
  rm -f /etc/dnsmasq.d/domains-blocklist*
  cat /usr/share/dnsmasq/dns-blocklist-archive/blocklist-mini.conf.tar.zst* | tar -C /tmp/ --zstd -xvf -
  cp -f /tmp/blocklist-mini.conf /etc/dnsmasq.d/domains-blocklist.conf
  restorecon -vR /etc/dnsmasq.d/
  rm /tmp/blocklist-mini.conf*

  hostnamectl set-hostname --static "catcat"

  # Permit user 1000
  usermod -aG input $U1000
  usermod -aG libvirt $U1000

  mkdir -p /etc/catcat-os/
  echo 'first boot' > /etc/catcat-os/first-boot
fi

if ! diff -q /etc/catcat-os/update_sha /etc/catcat-os/previous_update_sha; then
  [[ ! -d /root/.config/bat ]] && { mkdir -p /root/.config/ ; ln -sf /etc/bat /root/.config/; }
  /usr/bin/bat cache --build

  /usr/bin/dconf update

  cat /etc/catcat-os/update_sha > /etc/catcat-os/previous_update_sha
fi

# to use dnscrypt-proxy
if systemctl is-enabled dnscrypt-proxy.service; then
  mkdir -p /etc/catcat-os/localdns.d /var/log/dnscrypt-proxy /var/cache/dnscrypt-proxy #/var/log/dnsmasq
  ln -sf /usr/etc/catcat-os/localdns.d/localdns-resolv.conf /etc/resolv.conf
  chattr +i /etc/catcat-os/localdns.d/localdns-resolv.conf
fi

# setup grub
if [[ ! -d /boot/grub_themes/catppuccin-mocha-grub-theme ]]; then
  mkdir -p /boot/grub_themes
  cp -drf /usr/share/grub/themes/* /boot/grub_themes

  replaceXAdd 'GRUB_TIMEOUT=' 'GRUB_TIMEOUT=2' /etc/default/grub
#  replaceXAdd 'GRUB_ENABLE_BLSCFG=' 'GRUB_ENABLE_BLSCFG=false' /etc/default/grub
  replaceXAdd 'GRUB_TERMINAL_OUTPUT=' 'GRUB_TERMINAL_OUTPUT=gfxterm' /etc/default/grub
  replaceXAdd 'GRUB_GFXPAYLOAD_LINUX=' 'GRUB_GFXPAYLOAD_LINUX=keep' /etc/default/grub
  #"GRUB_GFXMODE=$(xdpyinfo | grep -oP 'dimensions:\s+\K\S+')"
  replaceXAdd 'GRUB_GFXMODE=' 'GRUB_GFXMODE=auto' /etc/default/grub
  replaceXAdd 'GRUB_THEME=' 'GRUB_THEME="/boot/grub_themes/catppuccin-mocha-grub-theme/theme.txt"' /etc/default/grub

  if [[ -d /sys/firmware/efi ]]; then
    grub2-mkconfig -o /etc/grub2-efi.cfg
    #sed -i --follow-symlinks 's|linux16|linuxefi|;s|initrd16|initrdefi|' /etc/grub2-efi.cfg
  else
    grub2-mkconfig -o /etc/grub2.cfg
  fi
  #grub2-editenv - unset menu_auto_hide
fi

# set kargs
KARGS_TO_ADD=(
  "rd.luks=discard"
  "rd.udev.log_priority=3"
  "loglevel=3"
  "sysrq_always_enabled=1"
  "processor.ignore_ppc=1"
  "split_lock_detect=off"
  "pci=noats"
  "bluetooth.disable_ertm=1"
  "preempt=full"
)
# "amdgpu.ppfeaturemask=0xffffffff"
# "mem_sleep_default=deep"

if command -v nvidia-smi; then
  KARGS_TO_ADD+=(
    "nvidia-drm.modeset=1"
    "rd.driver.blacklist=nouveau"
    "modprobe.blacklist=nouveau"
    )
fi

for karg in "${KARGS_TO_ADD[@]}"; do
  if [[ ! $KARGS =~ $karg ]]; then
    echo "Adding needed kargs for $karg"
    NEEDED_KARGS+=("--append-if-missing=$karg")
  fi
done

if [[ $KARGS =~ "nomodeset" ]]; then
  echo "Removing nomodeset"
  NEEDED_KARGS+=("--delete-if-present=nomodeset")
fi

if [[ -n "$NEEDED_KARGS" ]]; then
  echo "Found needed karg changes, applying the following: ${NEEDED_KARGS[*]}"
  rpm-ostree kargs ${NEEDED_KARGS[*]} &
else
  echo "No karg changes needed"
fi


# enable nvidia optimus if device is laptop and has nvidia dgpu
#if command -v nvidia-smi; then
#  if [[ -d /sys/module/battery ]] && [[ -d /proc/acpi/button/lid ]]; then
#    if [ ! -f /etc/modprobe.d/nvidia.conf ] || ! grep -qF "NVreg_DynamicPowerManagement" /etc/modprobe.d/nvidia-optimus.conf; then
#      echo "# https://download.nvidia.com/XFree86/Linux-x86_64/545.29.06/README/dynamicpowermanagement.html" >> /etc/modprobe.d/nvidia-optimus.conf
#      echo "options nvidia NVreg_DynamicPowerManagement=0x02" >> /etc/modprobe.d/nvidia-optimus.conf
#    fi
#  fi
#fi

# enable i2c-dev support to configure monitors via ddcutil if device is not laptop
if ! inxi -M | grep "Type:.*Laptop"; then
  echo "i2c-dev" > /etc/modules-load.d/i2c-dev.conf
  # enable i2c support for nvidia cards
  if command -v nvidia-smi; then
    echo "options nvidia NVreg_RegistryDwords=RMUseSwI2c=0x01;RMI2cSpeed=100" > /etc/modprobe.d/nvidia-i2c-support.conf
  fi
fi

# configure systemd services
if ! inxi -M | grep -qE "System: Micro-Star|System: MSI"; then
  systemctl disable --force --now mcontrolcenter.helper.service
  systemctl --global disable mcontrolcenter.helper.service
fi


# FIXES
# If the hostname is too long Distrobox will fail during setup
# Let's check the length and reset it to something sensible if that happens.
if (( $(hostname | wc -m) > 20 )); then
  hostnamectl set-hostname catcat
fi

# Set default target to graphical, fixes rebase from base image
if grep -qv "graphical.target" <<< "$(systemctl get-default)"; then
  systemctl set-default graphical.target
fi

# Usbguard setup
#if [[ ! -d /var/log/usbguard ]]; then
#  usbguard_conf="/etc/usbguard/usbguard-daemon.conf"
#  mkdir -p /var/log/usbguard
#  mkdir -p /etc/usbguard
#  chmod 755 /etc/usbguard
#  restorecon -vR /var/log/usbguard
#  sh -c 'usbguard generate-policy > /etc/usbguard/rules.conf'

#  sed -i "s/^PresentControllerPolicy=.*/PresentControllerPolicy=apply-policy/" "$usbguard_conf"
#  sed -i "s/^HidePII=.*/HidePII=true/" "$usbguard_conf"
#  sed -i "/IPCAllowedGroups=wheel/s/$/ usbguard/" "$usbguard_conf"
#  usbguard add-user $U1000

#  systemctl enable --force --now usbguard.service
#fi
